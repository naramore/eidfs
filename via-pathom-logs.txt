_, {:pre, :attrs}
  _, {:pre, :attr}
    _, {:pre, :edges}
      :pre_depth_inc, {:pre, :edge}
      :post_depth_inc, {:pre, :edge}
        _, {:pre, :attrs} | _, {:pre, :attr}
          ...
      :pre_depth_dec, {:post, :edge}
      :post_depth_dec, {:post, :edge}
    _, {:post, :edges}
  _, {:post, :attr}
_, {:post, :attrs}


planner:
  edge_stack: [{Edge.id(), Vertex.id()}]
  edges_stack: [[{Edge.id(), Vertex.id()}] | nil]
  attrs_stack: [[Vertex.id()] | nil]
  

{:pre, :attrs}, :cont, attrs, graph, planner
  if availabile?, do: :done, else: :cont
  push_to_attrs_stack(planner, attrs, [])

{:pre, :attr}, :cont, attr, graph, planner
  if availabile?, do: :done, else: :cont

{:pre, :edges}, :cont, [edge], graph, planner
  push_to_edges_stack(planner, nil)

{:pre, :edges}, :cont, edges, graph, planner
  push_to_edges_stack(planner, [])
  
{:pre, :edge}, :cont, {eid, _, _, rs}, graph, planner
  {nid, planner} = add_or_node(planner, rid)
  planner = add_to_edge_stack(planner, eid, nid)

{:post, :edge}, cont, {eid, _, _, _}, graph, planner
  {^eid, _} = peek_at_node_stack(planner)
  {_, nid} = pop_node_stack(planner)
  case cont do
    :done ->
      push_to_current_edges_stack(planner, eid, nid)
      add_next_node(planner, ...)
    {:halt, _} ->
      cascade_delete_node(planner, nid)

{:post, :edges}, cont, edges, graph, planner
  case pop_current_edges_stack(planner) do
    nil -> {cont, graph, planner}
    {es, planner} -> 
      case cont do
        :done -> create_root_or_node(planner, branches)
        {:halt, _} -> {cont, graph, planner}

# {:post, :attr}, cont, attr, graph, planner

{:post, :attrs}, cont, attrs, graph, planner
  case pop_named_attrs_stack(planner, attrs) do
    nil -> {cont, graph, planner}
    {attributes, planner} ->
      case cont do
        :done -> create_root_and_node(planner, branches)
        {:halt, _} -> {cont, graph, planner}
        




    Process attribute :p                                # _, {:pre, :attr}, _, :p                                 =>
    Add nodes for input path {:m {}}                    # :pre_depth_inc, {:pre, :edge}, _, {_, :m, _, _}         => add_node(1, r8)
01  - Computing :p dependencies for {:m {}}             # :post_depth_inc, {:pre, :edge}, _, {_, :m, :p, _}       =>
01  - Processing dependency {:m {}}                     # :post_depth_inc, {:pre, :edge}, _, {_, :m, _, _}        =>
01  - Process attribute :m                              # _, {:pre, :attr}, _, :m                                 =>
01  - Add nodes for input path {:l {}}                  # :pre_depth_inc, {:pre, :edge}, _, {_, :l, _, _}         => add_node(2, r5)
02  -- Computing :m dependencies {:l {}}                # :post_depth_inc, {:pre, :edge}, _, {_, :l, :m, _}       =>
02  -- Processing depencency {:l {}}                    # :post_depth_inc, {:pre, :edge}, _, {_, :l, _, _}        =>
02  -- Process attribute :l                             # _, {:pre, :attr}, _, :l                                 =>
02  -- Add nodes for input path {:e {}}                 # :pre_depth_inc, {:pre, :edge}, _, {_, :e, _, _}         => add_node(3, r4)
03  --- Computing :l dependencies {:e {}}               # :post_depth_inc, {:pre, :edge}, _, {_, :e, :l, _}       =>
03  --- Processing dependency {:e {}}                   # :post_depth_inc, {:pre, :edge}, _, {_, :e, _, _}        =>
03  --- Process attribute :e                            # _, {:pre, :attr}, _, :e                                 =>
03  --- Add nodes for input path {:c {}}                # :pre_depth_inc, {:pre, :edge}, _, {_, :c, _, _}         => add_node(4, r3)
04  ---- Computing :e dependencies {:c {}}              # :post_depth_inc, {:pre, :edge}, _, {_, :c, :e, _}       =>
04  ---- Processing dependency {:c {}}                  # :post_depth_inc, {:pre, :edge}, _, {_, :c, _, _}        =>
04  ---- Process attribute :c                           # _, {:pre, :attr}, _, :c                                 =>
04  ---- Add nodes for input path {}                    # :pre_depth_inc, {:pre, :edge}, _, {_, [], _, _}         => add_node(5, s1)
04  ---- Complete computing deps {:c {}}                # :pre_depth_dec, {:post, :edge}, :done, {_, _, :c, _}    =>
03  --- Chained deps                                    # :post_depth_dec, {:post, edge}, :done, _                => add_edge(5, 4)
03  --- Complete computing deps {:e {}}                 # :pre_depth_dec, {:post, :edge}, :done, {_, _, :e, _}    =>
02  -- Chained deps                                     # :post_depth_dec, {:post, edge}, :done, _                => add_edge(4, 3)
02  -- Complete computing deps {:l {}}                  # :pre_depth_dec, {:post, :edge}, :done, {_, _, :l, _}    =>
01  - Chained deps                                      # :post_depth_dec, {:post, edge}, :done, _                => add_edge(3, 2)
01  - Complete computing deps {:m {}}                   # :pre_depth_dec, {:post, :edge}, :done, {_, _, :m, _}    =>
    Chained deps                                        # :post_depth_dec, {:post, edge}, :done, _                => add_edge(2, 1)
    Add nodes for input path {:o {}}                    #                                                         => add_node(6, r9)
06  - Computing :p dependencies for {:o {}}             #                                                         => 
06  - Processing dependency {:o {}}                     #                                                         => 
06  - Process attribute :o                              # _, {:pre, :attr}, _, :o                                 => 
06  - Add nodes for input path {:n {}}                  #                                                         => add_node(7, r7)
07  -- Computing :o dependencies for {:n {}}            #                                                         => 
07  -- Processing dependency {:n {}}                    #                                                         => 
07  -- Process attribute :n                             # _, {:pre, :attr}, _, :n                                 => 
07  -- Add nodes for input path {:l {}}                 #                                                         => add_node(8, r6)
08  --- Computing :n dependencies for {:l {}}           #                                                         => 
08  --- Processing dependency {:l {}}                   #                                                         => 
08  --- Process attribute :l                            # _, {:pre, :attr}, _, :l                                 => 
08  --- Add nodes for input path {:e {}}                #                                                         => add_node(9, r4)
09  ---- Computing :l dependencies for {:e {}}          #                                                         => 
09  ---- Processing dependency {:e {}}                  #                                                         => 
09  ---- Process attribute :e                           # _, {:pre, :attr}, _, :e                                 => 
09  ---- Add nodes for input path {:c {}}               #                                                         => add_node(10, r3)
10  ----- Computing :e dependencies for {:c {}}         #                                                         => 
10  ----- Processing dependency {:c {}}                 #                                                         => 
10  ----- Process attribute :c                          # _, {:pre, :attr}, _, :c                                 => 
10  ----- Add nodes for input path {}                   #                                                         => add_node(11, s1)
10  ----- Complete computing deps {:c {}}               #                                                         => 
09  ---- Chained deps                                   #                                                         => add_edge(11, 10)
09  ---- Complete computing deps {:e {}}                #                                                         => 
08  --- Chained deps                                    #                                                         => add_edge(10, 9)
08  --- Complete computing deps {:l {}}                 #                                                         => 
07  -- Chained deps                                     #                                                         => add_edge(9, 8)
07  -- Complete computing deps {:n {}}                  #                                                         => 
06  - Chained deps                                      #                                                         => add_edge(8, 7)
06  - Add nodes for input path {:z {}}                  # :pre_depth_inc, {:pre, :edge}, _, {_, :z, _, _}         => add_node(12, r23)
12  -- Computing :p dependencies for {:z {}}            # :post_depth_inc, {:pre, :edge}, _, {_, :z, :p, _}       => 
12  -- Processing dependency {:z {}}                    # _, {:pre, :attr}, _, :z, _, %{depth: d} when d > 0      => 
12  -- Process attribute :z                             # _, {:pre, :attr}, _, :z                                 => 
12  -- Add nodes for input path {:y {}}                 # :pre_depth_inc, {:pre, :edge}, _, {_, :y, _, _}         => add_node(13, r22)
13  --- Computing :z dependencies for {:y {}}           # :post_depth_inc, {:pre, :edge}, _, {_, :y, :z, _}       => 
13  --- Processing dependency {:y {}}                   # _, {:pre, :attr}, _, :y, _, %{depth: d} when d > 0      => 
13  --- Process attribute :y                            # _, {:pre, :attr}, _, :y                                 => 
13  --- Add nodes for input path {:s {}}                # :pre_depth_inc, {:pre, :edge}, _, {_, :s, _, _}         => add_node(14, r21)
14  ---- Computing :y dependencies for {:s {}}          # :post_depth_inc, {:pre, :edge}, _, {_, :s, :y, _}       => 
14  ---- Processing dependency {:s {}}                  # _, {:pre, :attr}, _, :s, _, %{depth: d} when d > 0      => 
14  ---- Process attribute :s                           # _, {:pre, :attr}, _, :s                                 => 
14  ---- Add nodes for input path {:r {}, :w {}}        # :pre_depth_inc, {:pre, :edge}, _, {_, [:r, :w], _, _}   => add_node(15, r20)
15  ----- Computing :s dependencies for {:r {}, :w {}}  #                                                         => 
15  ----- Processing dependency {:r {}}                 # _, {:pre, :attr}, _, :r, _, %{depth: d} when d > 0      => 
15  ----- Process attribute :r                          # _, {:pre, :attr}, _, :r                                 => 
15  ----- Add nodes for input path {:q {}}              #                                                         => add_node(16, r16)
16  ------ Computing :r dependencies for {:q {}}        #                                                         => 
16  ------ Processing dependency {:q {}}                #                                                         => 
16  ------ Process attribute :q                         # _, {:pre, :attr}, _, :q                                 => 
16  ------ Add nodes for input path {}                  #                                                         => add_node(17, s2)
16  ------ Complete computing deps {:q {}}              #                                                         => 
15  ----- Chained deps                                  #                                                         => add_edge(17, 16)
15  ----- Processing dependency {:w {}}                 #                                                         => 
15  ----- Process attribute :w                          # _, {:pre, :attr}, _, :w                                 => 
15  ----- Add nodes for input path {:v {}}              #                                                         => add_node(18, r19)
18  ------ Computing :w dependencies for {:v {}}        #                                                         => 
18  ------ Processing dependency {:v {}}                #                                                         => 
18  ------ Process attribute :v                         # _, {:pre, :attr}, _, :v                                 => 
18  ------ Add nodes for input path {:t {}}             #                                                         => add_node(19, r17)
19  ------- Computing :v dependencies for {:t {}}       #                                                         => 
19  ------- Processing dependency {:t {}}               #                                                         => 
19  ------- Process attribute :t                        # _, {:pre, :attr}, _, :t                                 => 
19  ------- Add nodes for input path {}                 #                                                         => add_node(20, s3)
19  ------- Complete computing deps {:t {}}             #                                                         => 
18  ------ Chained deps                                 #                                                         => add_edge(20, 19)
18  ------ Add nodes for input path {:u {}}             #                                                         => add_node(21, r18)
21  ------- Computing :v dependencies for {:u {}}       #                                                         => 
21  ------- Processing dependency {:u {}}               #                                                         => 
21  ------- Process attribute :u                        # _, {:pre, :attr}, _, :u                                 => 
21  ------- Add nodes for input path {}                 #                                                         => add_node(22, s4)
21  ------- Complete computing deps {:u {}}             #                                                         => 
18  ------ Chained deps                                 #                                                         => add_edge(22, 21)
18  ------ Create root OR                               #                                                         => add_node(23, or, [20, 22])
18  ------ Complete computing deps {:v {}}              #                                                         => 
15  ----- Chained deps                                  #                                                         => add_edge(23, 18)
15  ----- Create root AND                               #                                                         => add_node(24, and, [23, 17])
15  ----- Complete computing deps {:r {}, :w {}}        #                                                         => 
14  ---- Chained deps                                   #                                                         => add_edge(24, 15)
14  ---- Complete computing deps {:s {}}                #                                                         => 
13  --- Chained deps                                    #                                                         => add_edge(15, 14)
13  --- Add nodes for input path {:ac {}}               #                                                         => add_node(25, r26)
00  ---- Computing :y dependencies for {:ac {}}         #                                                         => 
00  ---- Processing dependency {:ac {}}                 #                                                         => 
00  ---- Process attribute :ac                          # _, {:pre, :attr}, _, :ac                                => 
00  ---- Add nodes for input path {:ad {}}              #                                                         => add_node(26, r27)
00  ----- Computing :ac dependencies for {:ad {}}       #                                                         => 
00  ----- Processing dependency {:ad {}}                #                                                         => 
00  ----- Process attribute :ad                         # _, {:pre, :attr}, _, :ad                                => 
00  ----- Add nodes for input path {ae: {}}             #                                                         => add_node(27, r28)
00  ------ Computing :ad dependencies for {:ae {}}      #                                                         => 
00  ------ Processing dependency {:ae {}}               #                                                         => 
00  ------ Process attribute :ae                        # _, {:pre, :attr}, _, :ae                                => 
00  ------ Add nodes for input path {}                  #                                                         => add_node(28, s5)
00  ------ Complete computing deps {:ae {}}             #                                                         => 
00  ----- Chained deps                                  #                                                         => add_edge(28, 27)
00  ----- Complete computing deps {:ad {}}              #                                                         => 
00  ---- Chained deps                                   #                                                         => add_edge(27, 26)
00  ---- Complete computing deps {:ac {}}               #                                                         => 
00  --- Chained deps                                    #                                                         => add_edge(26, 25)
00  --- Create root OR                                  #                                                         => add_node(29, or, [24, 28])
00  --- Complete computing deps {:y {}}                 #                                                         => 
00  -- Chained deps                                     #                                                         => add_edge(29, 13)
00  -- Add nodes for input path {:ab {}}                #                                                         => add_node(30, r25)
00  --- Computing :z dependencies for {:ab {}}          #                                                         => 
00  --- Processing dependency {:ab {}}                  #                                                         => 
00  --- Process attribute :ab                           # _, {:pre, :attr}, _, :ab                                => 
00  --- Add nodes for input path {:aa {}}               #                                                         => add_node(31, r24)
00  ---- Computing :ab dependencies for {:aa {}}        #                                                         => 
00  ---- Processing dependency {:aa {}}                 #                                                         => 
00  ---- Mark path {:aa {}} as unreachable.             #                                                         => 
00  ---- Failed to compute dependencies {:aa {}}        #                                                         => remove_node(31)
00  --- Add nodes for input path {:af {}}               #                                                         => add_node(32, r30)
00  ---- Computing :ab dependencies for {:af {}}        #                                                         => 
00  ---- Processing dependency {:af {}}                 #                                                         => 
00  ---- Process attribute :af                          # _, {:pre, :attr}, _, :af                                => 
00  ---- Add nodes for input path {:ae {}}              #                                                         => add_node(33, r29)
00  ----- Computing :af dependencies for {:ae {}}       #                                                         => 
00  ----- Processing dependency {:ae {}}                #                                                         => 
00  ----- Process attribute :ae                         # _, {:pre, :attr}, _, :ae                                => 
00  ----- Add nodes for input path {}                   #                                                         => add_node(34, s5)
00  ----- Complete computing deps {:ae {}}              #                                                         => 
00  ---- Chained deps                                   #                                                         => add_edge(34, 33)
00  ---- Complete computing deps {:af {}}               #                                                         => 
00  --- Chained deps                                    #                                                         => add_edge(33, 32)
00  --- Add nodes for input path {:ad {}}               #                                                         => add_node(35, r31)
00  ---- Computing :ab dependencies for {:ad {}}        #                                                         => 
00  ---- Processing dependency {:ad {}}                 #                                                         => 
00  ---- Process attribute :ad                          # _, {:pre, :attr}, _, :ad                                => 
00  ---- Add nodes for input path {:ae {}}              #                                                         => add_node(36, r28)
00  ----- Computing :ad dependencies for {:ae {}}       #                                                         => 
00  ----- Processing dependency {:ae {}}                #                                                         => 
00  ----- Process attribute :ae                         # _, {:pre, :attr}, _, :ae                                => 
00  ----- Add nodes for input path {}                   #                                                         => add_node(37, s5)
00  ----- Complete computing deps {:ae {}}              #                                                         => 
00  ---- Chained deps                                   #                                                         => add_edge(37, 36)
00  ---- Complete computing deps {:ad {}}               #                                                         => 
00  --- Chained deps                                    #                                                         => add_edge(36, 35)
00  --- Create root OR                                  #                                                         => add_node(38, or, [34, 37])
00  --- Complete computing deps {:ab {}}                #                                                         => 
00  -- Chained deps                                     #                                                         => add_edge(38, 30)
00  -- Create root OR                                   #                                                         => add_node(39, or, [29, 38])
00  -- Complete computing deps {:z {}}                  #                                                         => 
00  - Chained deps                                      #                                                         => add_edge(39, 12)
00  - Create root OR                                    #                                                         => add_node(40, or, [11, 39])
00  - Complete computing deps {:o {}}                   #                                                         => 
00  Chained deps                                        #                                                         => add_edge(40, 6)
00  Add nodes for input path {:k {}}                    #                                                         => add_node(41, r33)
00  - Computing :p dependencies for {:k {}}             #                                                         => 
00  - Processing dependency {:k {}}                     #                                                         => 
00  - Process attribute :k                              # _, {:pre, :attr}, _, :k                                 => 
00  - Add nodes for input path {:g {}}                  #                                                         => add_node(42, r10)
00  -- Computing :k dependencies for {:g {}}            #                                                         => 
00  -- Processing dependency {:g {}}                    #                                                         => 
00  -- Process attribute :g                             # _, {:pre, :attr}, _, :g                                 => 
00  -- Add nodes for input path {:h {}}                 #                                                         => add_node(43, r11)
00  --- Computing :g dependencies for {:h {}}           #                                                         => 
00  --- Processing dependency {:h {}}                   #                                                         => 
00  --- Process attribute :h                            # _, {:pre, :attr}, _, :h                                 => 
00  --- Add nodes for input path {:i {}}                #                                                         => add_node(44, r12)
00  ---- Computing :h dependencies for {:i {}}          #                                                         => 
00  ---- Processing dependency {:i {}}                  #                                                         => 
00  ---- Process attribute :i                           # _, {:pre, :attr}, _, :i                                 => 
00  ---- Add nodes for input path {:j {}}               #                                                         => add_node(45, r13)
00  ----- Computing :i dependencies for {:j {}}         #                                                         => 
00  ----- Processing dependency {:j {}}                 #                                                         => 
00  ----- Process attribute :j                          # _, {:pre, :attr}, _, :j                                 => 
00  ----- Add nodes for input path {:g {}}              #                                                         => add_node(46, r14)
00  ------ Computing :j dependencies for {:g {}}        #                                                         => 
00  ------ Processing dependency {:g {}}                #                                                         => 
00  ------ Attribute cycle detected for :g              #                                                         => 
00  ------ Failed to compute dependencies for {:g {}}   #                                                         => remove_node(46)
00  ----- Mark path {:j {}} as unreachable              #                                                         => 
00  ----- Failed to compute dependencies for {:j {}}    #                                                         => remove_node(45)
00  ---- Mark path {:i {}} as unreachable               #                                                         => 
00  ---- Failed to compute dependencies for {:i {}}     #                                                         => remove_node(44)
00  --- Mark path {:h {}} as unreachable                #                                                         => 
00  --- Failed to compute dependencies for {:h {}}      #                                                         => remove_node(43)
00  -- Mark path {:g {}} as unreachable                 #                                                         => 
00  -- Failed to compute dependencies for {:g {}}       #                                                         => remove_node(42)
00  - Add nodes for input path {:f {}}                  #                                                         => add_node(47, r32)
00  -- Computing :k dependencies for {:f {}}            #                                                         => 
00  -- Processing dependency {:f {}}                    #                                                         => 
00  -- Process attribute :f                             # _, {:pre, :attr}, _, :f                                 => 
00  -- Add nodes for input path {:b {}, :d {}}          #                                                         => add_node(48, r15)
00  --- Computing :f dependencies for {:b {}, :d {}}    #                                                         => 
00  --- Processing dependency {:b {}}                   #                                                         => 
00  --- Process attribute :b                            # _, {:pre, :attr}, _, :b                                 => 
00  --- Add nodes for input path {:a {}}                #                                                         => add_node(49, r1)
00  ---- Computing :b dependencies for {:a {}}          #                                                         => 
00  ---- Processing dependency {:a {}}                  #                                                         => 
00  ---- Mark path {:a {}} as unreachable               #                                                         => 
00  ---- Failed to compute dependencies {:a {}}         #                                                         => remove_node(49)
00  --- Mark path {:b {}} as unreachable                #                                                         => 
00  --- Failed to compute dependencies {:b {}, :d {}}   #                                                         => remove_node(48)
00  -- Mark path {:f {}} as unreachable                 #                                                         => 
00  -- Failed to compute dependencies {:f {}}           #                                                         => remove_node(47)
00  - Mark path {:k {}} as unreachable                  #                                                         => 
00  - Failed to compute dependencies {:k {}}            #                                                         => remove_node(41)
00  Create root OR                                      #                                                         => add_node(50, or, [5, 40])


{
  :b {{:a {}} #{r1}},
  :c {{} #{s1}},
  :d {{:c {}} #{r2}},
  :e {{:c {}} #{r3}},
  :f {{:b {}, :d {}} #{r15}},
  :g {{:h {}} #{r11}},
  :h {{:i {}} #{r12}},
  :i {{:j {}} #{r13}},
  :j {{:g {}} #{r14}},
  :k {{:g {}} #{r10}
      {:f {}} #{r32}},
  :l {{:e {}} #{r4}},
  :m {{:l {}} #{r5}},
  :n {{:l {}} #{r6}},
  :o {{:n {}} #{r7}
      {:z {}} #{r23}},
  :p {{:m {}} #{r8},
      {:o {}} #{r9}
      {:k {}} #{r33}},
  :q {{} #{s2}},
  :r {{:q {}} #{r16}},
  :s {{:r {}, :w {}} #{r20}},
  :t {{} #{s3}},
  :u {{} #{s4}},
  :v {{:t {}} #{r17}
      {:u {}} #{r18}},
  :w {{:v {}} #{r19}},
  :y {{:s {}} #{r21}
      {:ac {}} #{r26}},
  :z {{:y {}} #{r22}
      {:ab {}} #{r25}},
  :ab {{:aa {}} #{r24}
       {:af {}} #{r30}
       {:ad {}} #{r31}},
  :ac {{:ad {}} #{r27}},
  :ad {{:ae {}} #{r28}},
  :ae {{} #{s5}},
  :af {{:ae {}} #{r29}}
}


{c, g, a} = Via.Example.test(); nil
ginfo = Digraph.vertices(a.plan.graph) |> Enum.map(&{&1, Digraph.in_neighbours(a.plan.graph, &1.id), Digraph.out_neighbours(a.plan.graph, &1.id)})
gginfo = Enum.group_by(ginfo,
  fn
    {_, [], []} -> :isolated
    {_, _, []} -> :leaf
    {_, [], _} -> :root
    _ -> :otherwise
  end,
  fn
    {v, [], []} -> v
    {v, i, []} -> {v, i}
    {v, [], o} -> {v, o}
    {v, i, o} -> {v, i, o}
  end
)

gginfo |> Map.get(:root) |> Enum.map(fn {%{id: id}, _} -> id end) |> Enum.map(&{Digraph.vertex(a.plan.graph, &1), Via.Example.vplan(a.plan.graph, &1)})





%{
  leaf: [
    {%Digraph.Vertex{
       id: [:"$v" | 0],
       label: %{
         expects: %{p: %{}},
         input: %{m: %{}},
         resolver: :r8,
         type: :resolver
       }
     },
     [
       %Digraph.Vertex{
         id: [:"$v" | 1],
         label: %{
           expects: %{m: %{}},
           input: %{l: %{}},
           resolver: :r5,
           type: :resolver
         }
       }
     ]},
    {%Digraph.Vertex{
       id: [:"$v" | 4],
       label: %{
         expects: %{p: %{}},
         input: %{o: %{}},
         resolver: :r9,
         type: :resolver
       }
     },
     [
       %Digraph.Vertex{
         id: [:"$v" | 31],
         label: %{branches: [[:"$v" | 5], [:"$v" | 9]], type: :or}
       }
     ]},
    {%Digraph.Vertex{
       id: [:"$v" | 5],
       label: %{
         expects: %{o: %{}},
         input: %{n: %{}},
         resolver: :r7,
         type: :resolver
       }
     },
     [
       %Digraph.Vertex{
         id: [:"$v" | 31],
         label: %{branches: [[:"$v" | 5], [:"$v" | 9]], type: :or}
       }
     ]},
    {%Digraph.Vertex{
       id: [:"$v" | 9],
       label: %{
         expects: %{o: %{}},
         input: %{z: %{}},
         resolver: :r23,
         type: :resolver
       }
     },
     [
       %Digraph.Vertex{
         id: [:"$v" | 30],
         label: %{branches: [[:"$v" | 10], [:"$v" | 23]], type: :or}
       },
       %Digraph.Vertex{
         id: [:"$v" | 31],
         label: %{branches: [[:"$v" | 5], [:"$v" | 9]], type: :or}
       }
     ]},
    {%Digraph.Vertex{
       id: [:"$v" | 10],
       label: %{
         expects: %{z: %{}},
         input: %{y: %{}},
         resolver: :r22,
         type: :resolver
       }
     },
     [
       %Digraph.Vertex{
         id: [:"$v" | 30],
         label: %{branches: [[:"$v" | 10], [:"$v" | 23]], type: :or}
       }
     ]},
    {%Digraph.Vertex{
       id: [:"$v" | 11],
       label: %{
         expects: %{y: %{}},
         input: %{s: %{}},
         resolver: :r21,
         type: :resolver
       }
     },
     [
       %Digraph.Vertex{
         id: [:"$v" | 22],
         label: %{branches: [[:"$v" | 11], [:"$v" | 19]], type: :or}
       }
     ]},
    {%Digraph.Vertex{
       id: [:"$v" | 13],
       label: %{
         expects: %{r: %{}},
         input: %{q: %{}},
         resolver: :r16,
         type: :resolver
       }
     },
     [
       %Digraph.Vertex{
         id: [:"$v" | 18],
         label: %{
           branches: [[:"$v" | 14], [:"$v" | 13], [:"$v" | 14], [:"$v" | 13]],
           type: :and
         }
       }
     ]},
    {%Digraph.Vertex{
       id: [:"$v" | 14],
       label: %{
         expects: %{w: %{}},
         input: %{v: %{}},
         resolver: :r19,
         type: :resolver
       }
     },
     [
       %Digraph.Vertex{
         id: [:"$v" | 17],
         label: %{branches: [[:"$v" | 15], [:"$v" | 16]], type: :or}
       },
       %Digraph.Vertex{
         id: [:"$v" | 18],
         label: %{
           branches: [[:"$v" | 14], [:"$v" | 13], [:"$v" | 14], [:"$v" | 13]],
           type: :and
         }
       }
     ]},
    {%Digraph.Vertex{
       id: [:"$v" | 15],
       label: %{
         expects: %{v: %{}},
         input: %{t: %{}},
         resolver: :r17,
         type: :resolver
       }
     },
     [
       %Digraph.Vertex{
         id: [:"$v" | 17],
         label: %{branches: [[:"$v" | 15], [:"$v" | 16]], type: :or}
       }
     ]},
    {%Digraph.Vertex{
       id: [:"$v" | 16],
       label: %{
         expects: %{v: %{}},
         input: %{u: %{}},
         resolver: :r18,
         type: :resolver
       }
     },
     [
       %Digraph.Vertex{
         id: [:"$v" | 17],
         label: %{branches: [[:"$v" | 15], [:"$v" | 16]], type: :or}
       }
     ]},
    {%Digraph.Vertex{
       id: [:"$v" | 19],
       label: %{
         expects: %{y: %{}},
         input: %{ac: %{}},
         resolver: :r26,
         type: :resolver
       }
     },
     [
       %Digraph.Vertex{
         id: [:"$v" | 20],
         label: %{
           expects: %{ac: %{}},
           input: %{ad: %{}},
           resolver: :r27,
           type: :resolver
         }
       },
       %Digraph.Vertex{
         id: [:"$v" | 22],
         label: %{branches: [[:"$v" | 11], [:"$v" | 19]], type: :or}
       }
     ]},
    {%Digraph.Vertex{
       id: [:"$v" | 23],
       label: %{
         expects: %{z: %{}},
         input: %{ab: %{}},
         resolver: :r25,
         type: :resolver
       }
     },
     [
       %Digraph.Vertex{
         id: [:"$v" | 29],
         label: %{branches: [[:"$v" | 25], [:"$v" | 27]], type: :or}
       },
       %Digraph.Vertex{
         id: [:"$v" | 30],
         label: %{branches: [[:"$v" | 10], [:"$v" | 23]], type: :or}
       }
     ]},
    {%Digraph.Vertex{
       id: [:"$v" | 25],
       label: %{
         expects: %{ab: %{}},
         input: %{af: %{}},
         resolver: :r30,
         type: :resolver
       }
     },
     [
       %Digraph.Vertex{
         id: [:"$v" | 29],
         label: %{branches: [[:"$v" | 25], [:"$v" | 27]], type: :or}
       }
     ]},
    {%Digraph.Vertex{
       id: [:"$v" | 27],
       label: %{
         expects: %{ab: %{}},
         input: %{ad: %{}},
         resolver: :r31,
         type: :resolver
       }
     },
     [
       %Digraph.Vertex{
         id: [:"$v" | 28],
         label: %{
           expects: %{ad: %{}},
           input: %{ae: %{}},
           resolver: :r28,
           type: :resolver
         }
       },
       %Digraph.Vertex{
         id: [:"$v" | 29],
         label: %{branches: [[:"$v" | 25], [:"$v" | 27]], type: :or}
       }
     ]}
  ],
  otherwise: [
    {%Digraph.Vertex{
       id: [:"$v" | 1],
       label: %{
         expects: %{m: %{}},
         input: %{l: %{}},
         resolver: :r5,
         type: :resolver
       }
     },
     [
       %Digraph.Vertex{
         id: [:"$v" | 2],
         label: %{
           expects: %{l: %{}},
           input: %{e: %{}},
           resolver: :r4,
           type: :resolver
         }
       }
     ],
     [
       %Digraph.Vertex{
         id: [:"$v" | 0],
         label: %{
           expects: %{p: %{}},
           input: %{m: %{}},
           resolver: :r8,
           type: :resolver
         }
       }
     ]},
    {%Digraph.Vertex{
       id: [:"$v" | 2],
       label: %{
         expects: %{l: %{}},
         input: %{e: %{}},
         resolver: :r4,
         type: :resolver
       }
     },
     [
       %Digraph.Vertex{
         id: [:"$v" | 3],
         label: %{
           expects: %{e: %{}},
           input: %{c: %{}},
           resolver: :r3,
           type: :resolver
         }
       }
     ],
     [
       %Digraph.Vertex{
         id: [:"$v" | 1],
         label: %{
           expects: %{m: %{}},
           input: %{l: %{}},
           resolver: :r5,
           type: :resolver
         }
       }
     ]},
    {%Digraph.Vertex{
       id: [:"$v" | 6],
       label: %{
         expects: %{n: %{}},
         input: %{l: %{}},
         resolver: :r6,
         type: :resolver
       }
     },
     [
       %Digraph.Vertex{
         id: [:"$v" | 7],
         label: %{
           expects: %{l: %{}},
           input: %{e: %{}},
           resolver: :r4,
           type: :resolver
         }
       }
     ],
     [
       %Digraph.Vertex{
         id: [:"$v" | 31],
         label: %{branches: [[:"$v" | 5], [:"$v" | 9]], type: :or}
       }
     ]},
    {%Digraph.Vertex{
       id: [:"$v" | 7],
       label: %{
         expects: %{l: %{}},
         input: %{e: %{}},
         resolver: :r4,
         type: :resolver
       }
     },
     [
       %Digraph.Vertex{
         id: [:"$v" | 8],
         label: %{
           expects: %{e: %{}},
           input: %{c: %{}},
           resolver: :r3,
           type: :resolver
         }
       }
     ],
     [
       %Digraph.Vertex{
         id: [:"$v" | 6],
         label: %{
           expects: %{n: %{}},
           input: %{l: %{}},
           resolver: :r6,
           type: :resolver
         }
       }
     ]},
    {%Digraph.Vertex{
       id: [:"$v" | 20],
       label: %{
         expects: %{ac: %{}},
         input: %{ad: %{}},
         resolver: :r27,
         type: :resolver
       }
     },
     [
       %Digraph.Vertex{
         id: [:"$v" | 21],
         label: %{
           expects: %{ad: %{}},
           input: %{ae: %{}},
           resolver: :r28,
           type: :resolver
         }
       }
     ],
     [
       %Digraph.Vertex{
         id: [:"$v" | 19],
         label: %{
           expects: %{y: %{}},
           input: %{ac: %{}},
           resolver: :r26,
           type: :resolver
         }
       }
     ]},
    {%Digraph.Vertex{
       id: [:"$v" | 22],
       label: %{branches: [[:"$v" | 11], [:"$v" | 19]], type: :or}
     },
     [
       %Digraph.Vertex{
         id: [:"$v" | 12],
         label: %{
           expects: %{s: %{}},
           input: %{r: %{}, w: %{}},
           resolver: :r20,
           type: :resolver
         }
       }
     ],
     [
       %Digraph.Vertex{
         id: [:"$v" | 30],
         label: %{branches: [[:"$v" | 10], [:"$v" | 23]], type: :or}
       },
       %Digraph.Vertex{
         id: [:"$v" | 11],
         label: %{
           expects: %{y: %{}},
           input: %{s: %{}},
           resolver: :r21,
           type: :resolver
         }
       },
       %Digraph.Vertex{
         id: [:"$v" | 19],
         label: %{
           expects: %{y: %{}},
           input: %{ac: %{}},
           resolver: :r26,
           type: :resolver
         }
       }
     ]},
    {%Digraph.Vertex{
       id: [:"$v" | 29],
       label: %{branches: [[:"$v" | 25], [:"$v" | 27]], type: :or}
     },
     [
       %Digraph.Vertex{
         id: [:"$v" | 26],
         label: %{
           expects: %{af: %{}},
           input: %{ae: %{}},
           resolver: :r29,
           type: :resolver
         }
       }
     ],
     [
       %Digraph.Vertex{
         id: [:"$v" | 23],
         label: %{
           expects: %{z: %{}},
           input: %{ab: %{}},
           resolver: :r25,
           type: :resolver
         }
       },
       %Digraph.Vertex{
         id: [:"$v" | 25],
         label: %{
           expects: %{ab: %{}},
           input: %{af: %{}},
           resolver: :r30,
           type: :resolver
         }
       },
       %Digraph.Vertex{
         id: [:"$v" | 27],
         label: %{
           expects: %{ab: %{}},
           input: %{ad: %{}},
           resolver: :r31,
           type: :resolver
         }
       }
     ]},
    {%Digraph.Vertex{
       id: [:"$v" | 30],
       label: %{branches: [[:"$v" | 10], [:"$v" | 23]], type: :or}
     },
     [
       %Digraph.Vertex{
         id: [:"$v" | 22],
         label: %{branches: [[:"$v" | 11], [:"$v" | 19]], type: :or}
       }
     ],
     [
       %Digraph.Vertex{
         id: [:"$v" | 9],
         label: %{
           expects: %{o: %{}},
           input: %{z: %{}},
           resolver: :r23,
           type: :resolver
         }
       },
       %Digraph.Vertex{
         id: [:"$v" | 10],
         label: %{
           expects: %{z: %{}},
           input: %{y: %{}},
           resolver: :r22,
           type: :resolver
         }
       },
       %Digraph.Vertex{
         id: [:"$v" | 23],
         label: %{
           expects: %{z: %{}},
           input: %{ab: %{}},
           resolver: :r25,
           type: :resolver
         }
       }
     ]},
    {%Digraph.Vertex{
       id: [:"$v" | 31],
       label: %{branches: [[:"$v" | 5], [:"$v" | 9]], type: :or}
     },
     [
       %Digraph.Vertex{
         id: [:"$v" | 6],
         label: %{
           expects: %{n: %{}},
           input: %{l: %{}},
           resolver: :r6,
           type: :resolver
         }
       }
     ],
     [
       %Digraph.Vertex{
         id: [:"$v" | 4],
         label: %{
           expects: %{p: %{}},
           input: %{o: %{}},
           resolver: :r9,
           type: :resolver
         }
       },
       %Digraph.Vertex{
         id: [:"$v" | 5],
         label: %{
           expects: %{o: %{}},
           input: %{n: %{}},
           resolver: :r7,
           type: :resolver
         }
       },
       %Digraph.Vertex{
         id: [:"$v" | 9],
         label: %{
           expects: %{o: %{}},
           input: %{z: %{}},
           resolver: :r23,
           type: :resolver
         }
       }
     ]}
  ],
  root: [
    {%Digraph.Vertex{
       id: [:"$v" | 3],
       label: %{
         expects: %{e: %{}},
         input: %{c: %{}},
         resolver: :r3,
         type: :resolver
       }
     },
     [
       %Digraph.Vertex{
         id: [:"$v" | 2],
         label: %{
           expects: %{l: %{}},
           input: %{e: %{}},
           resolver: :r4,
           type: :resolver
         }
       }
     ]},
    {%Digraph.Vertex{
       id: [:"$v" | 8],
       label: %{
         expects: %{e: %{}},
         input: %{c: %{}},
         resolver: :r3,
         type: :resolver
       }
     },
     [
       %Digraph.Vertex{
         id: [:"$v" | 7],
         label: %{
           expects: %{l: %{}},
           input: %{e: %{}},
           resolver: :r4,
           type: :resolver
         }
       }
     ]},
    {%Digraph.Vertex{
       id: [:"$v" | 12],
       label: %{
         expects: %{s: %{}},
         input: %{r: %{}, w: %{}},
         resolver: :r20,
         type: :resolver
       }
     },
     [
       %Digraph.Vertex{
         id: [:"$v" | 22],
         label: %{branches: [[:"$v" | 11], [:"$v" | 19]], type: :or}
       }
     ]},
    {%Digraph.Vertex{
       id: [:"$v" | 17],
       label: %{branches: [[:"$v" | 15], [:"$v" | 16]], type: :or}
     },
     [
       %Digraph.Vertex{
         id: [:"$v" | 14],
         label: %{
           expects: %{w: %{}},
           input: %{v: %{}},
           resolver: :r19,
           type: :resolver
         }
       },
       %Digraph.Vertex{
         id: [:"$v" | 15],
         label: %{
           expects: %{v: %{}},
           input: %{t: %{}},
           resolver: :r17,
           type: :resolver
         }
       },
       %Digraph.Vertex{
         id: [:"$v" | 16],
         label: %{
           expects: %{v: %{}},
           input: %{u: %{}},
           resolver: :r18,
           type: :resolver
         }
       }
     ]},
    {%Digraph.Vertex{
       id: [:"$v" | 18],
       label: %{
         branches: [[:"$v" | 14], [:"$v" | 13], [:"$v" | 14], [:"$v" | 13]],
         type: :and
       }
     },
     [
       %Digraph.Vertex{
         id: [:"$v" | 14],
         label: %{
           expects: %{w: %{}},
           input: %{v: %{}},
           resolver: :r19,
           type: :resolver
         }
       },
       %Digraph.Vertex{
         id: [:"$v" | 13],
         label: %{
           expects: %{r: %{}},
           input: %{q: %{}},
           resolver: :r16,
           type: :resolver
         }
       }
     ]},
    {%Digraph.Vertex{
       id: [:"$v" | 21],
       label: %{
         expects: %{ad: %{}},
         input: %{ae: %{}},
         resolver: :r28,
         type: :resolver
       }
     },
     [
       %Digraph.Vertex{
         id: [:"$v" | 20],
         label: %{
           expects: %{ac: %{}},
           input: %{ad: %{}},
           resolver: :r27,
           type: :resolver
         }
       }
     ]},
    {%Digraph.Vertex{
       id: [:"$v" | 26],
       label: %{
         expects: %{af: %{}},
         input: %{ae: %{}},
         resolver: :r29,
         type: :resolver
       }
     },
     [
       %Digraph.Vertex{
         id: [:"$v" | 29],
         label: %{branches: [[:"$v" | 25], [:"$v" | 27]], type: :or}
       }
     ]},
    {%Digraph.Vertex{
       id: [:"$v" | 28],
       label: %{
         expects: %{ad: %{}},
         input: %{ae: %{}},
         resolver: :r28,
         type: :resolver
       }
     },
     [
       %Digraph.Vertex{
         id: [:"$v" | 27],
         label: %{
           expects: %{ab: %{}},
           input: %{ad: %{}},
           resolver: :r31,
           type: :resolver
         }
       }
     ]}
  ]
}






[
  {%Digraph.Vertex{
     id: [:"$v" | 0],
     label: %{
       expects: %{p: %{}},
       input: %{m: %{}},
       resolver: :r8,
       type: :resolver
     }
   },
   [
     %Digraph.Vertex{
       id: [:"$v" | 1],
       label: %{
         expects: %{m: %{}},
         input: %{l: %{}},
         resolver: :r5,
         type: :resolver
       }
     }
   ], []},
  {%Digraph.Vertex{
     id: [:"$v" | 1],
     label: %{
       expects: %{m: %{}},
       input: %{l: %{}},
       resolver: :r5,
       type: :resolver
     }
   },
   [
     %Digraph.Vertex{
       id: [:"$v" | 2],
       label: %{
         expects: %{l: %{}},
         input: %{e: %{}},
         resolver: :r4,
         type: :resolver
       }
     }
   ],
   [
     %Digraph.Vertex{
       id: [:"$v" | 0],
       label: %{
         expects: %{p: %{}},
         input: %{m: %{}},
         resolver: :r8,
         type: :resolver
       }
     }
   ]},
  {%Digraph.Vertex{
     id: [:"$v" | 2],
     label: %{
       expects: %{l: %{}},
       input: %{e: %{}},
       resolver: :r4,
       type: :resolver
     }
   },
   [
     %Digraph.Vertex{
       id: [:"$v" | 3],
       label: %{
         expects: %{e: %{}},
         input: %{c: %{}},
         resolver: :r3,
         type: :resolver
       }
     }
   ],
   [
     %Digraph.Vertex{
       id: [:"$v" | 1],
       label: %{
         expects: %{m: %{}},
         input: %{l: %{}},
         resolver: :r5,
         type: :resolver
       }
     }
   ]},
  {%Digraph.Vertex{
     id: [:"$v" | 3],
     label: %{
       expects: %{e: %{}},
       input: %{c: %{}},
       resolver: :r3,
       type: :resolver
     }
   }, [],
   [
     %Digraph.Vertex{
       id: [:"$v" | 2],
       label: %{
         expects: %{l: %{}},
         input: %{e: %{}},
         resolver: :r4,
         type: :resolver
       }
     }
   ]},
  {%Digraph.Vertex{
     id: [:"$v" | 4],
     label: %{
       expects: %{p: %{}},
       input: %{o: %{}},
       resolver: :r9,
       type: :resolver
     }
   },
   [
     %Digraph.Vertex{
       id: [:"$v" | 31],
       label: %{branches: [[:"$v" | 5], [:"$v" | 9]], type: :or}
     }
   ], []},
  {%Digraph.Vertex{
     id: [:"$v" | 5],
     label: %{
       expects: %{o: %{}},
       input: %{n: %{}},
       resolver: :r7,
       type: :resolver
     }
   },
   [
     %Digraph.Vertex{
       id: [:"$v" | 31],
       label: %{branches: [[:"$v" | 5], [:"$v" | 9]], type: :or}
     }
   ], []},
  {%Digraph.Vertex{
     id: [:"$v" | 6],
     label: %{
       expects: %{n: %{}},
       input: %{l: %{}},
       resolver: :r6,
       type: :resolver
     }
   },
   [
     %Digraph.Vertex{
       id: [:"$v" | 7],
       label: %{
         expects: %{l: %{}},
         input: %{e: %{}},
         resolver: :r4,
         type: :resolver
       }
     }
   ],
   [
     %Digraph.Vertex{
       id: [:"$v" | 31],
       label: %{branches: [[:"$v" | 5], [:"$v" | 9]], type: :or}
     }
   ]},
  {%Digraph.Vertex{
     id: [:"$v" | 7],
     label: %{
       expects: %{l: %{}},
       input: %{e: %{}},
       resolver: :r4,
       type: :resolver
     }
   },
   [
     %Digraph.Vertex{
       id: [:"$v" | 8],
       label: %{
         expects: %{e: %{}},
         input: %{c: %{}},
         resolver: :r3,
         type: :resolver
       }
     }
   ],
   [
     %Digraph.Vertex{
       id: [:"$v" | 6],
       label: %{
         expects: %{n: %{}},
         input: %{l: %{}},
         resolver: :r6,
         type: :resolver
       }
     }
   ]},
  {%Digraph.Vertex{
     id: [:"$v" | 8],
     label: %{
       expects: %{e: %{}},
       input: %{c: %{}},
       resolver: :r3,
       type: :resolver
     }
   }, [],
   [
     %Digraph.Vertex{
       id: [:"$v" | 7],
       label: %{
         expects: %{l: %{}},
         input: %{e: %{}},
         resolver: :r4,
         type: :resolver
       }
     }
   ]},
  {%Digraph.Vertex{
     id: [:"$v" | 9],
     label: %{
       expects: %{o: %{}},
       input: %{z: %{}},
       resolver: :r23,
       type: :resolver
     }
   },
   [
     %Digraph.Vertex{
       id: [:"$v" | 30],
       label: %{branches: [[:"$v" | 10], [:"$v" | 23]], type: :or}
     },
     %Digraph.Vertex{
       id: [:"$v" | 31],
       label: %{branches: [[:"$v" | 5], [:"$v" | 9]], type: :or}
     }
   ], []},
  {%Digraph.Vertex{
     id: [:"$v" | 10],
     label: %{
       expects: %{z: %{}},
       input: %{y: %{}},
       resolver: :r22,
       type: :resolver
     }
   },
   [
     %Digraph.Vertex{
       id: [:"$v" | 30],
       label: %{branches: [[:"$v" | 10], [:"$v" | 23]], type: :or}
     }
   ], []},
  {%Digraph.Vertex{
     id: [:"$v" | 11],
     label: %{
       expects: %{y: %{}},
       input: %{s: %{}},
       resolver: :r21,
       type: :resolver
     }
   },
   [
     %Digraph.Vertex{
       id: [:"$v" | 22],
       label: %{branches: [[:"$v" | 11], [:"$v" | 19]], type: :or}
     }
   ], []},
  {%Digraph.Vertex{
     id: [:"$v" | 12],
     label: %{
       expects: %{s: %{}},
       input: %{r: %{}, w: %{}},
       resolver: :r20,
       type: :resolver
     }
   }, [],
   [
     %Digraph.Vertex{
       id: [:"$v" | 22],
       label: %{branches: [[:"$v" | 11], [:"$v" | 19]], type: :or}
     }
   ]},
  {%Digraph.Vertex{
     id: [:"$v" | 13],
     label: %{
       expects: %{r: %{}},
       input: %{q: %{}},
       resolver: :r16,
       type: :resolver
     }
   },
   [
     %Digraph.Vertex{
       id: [:"$v" | 18],
       label: %{
         branches: [[:"$v" | 14], [:"$v" | 13], [:"$v" | 14], [:"$v" | 13]],
         type: :and
       }
     }
   ], []},
  {%Digraph.Vertex{
     id: [:"$v" | 14],
     label: %{
       expects: %{w: %{}},
       input: %{v: %{}},
       resolver: :r19,
       type: :resolver
     }
   },
   [
     %Digraph.Vertex{
       id: [:"$v" | 17],
       label: %{branches: [[:"$v" | 15], [:"$v" | 16]], type: :or}
     },
     %Digraph.Vertex{
       id: [:"$v" | 18],
       label: %{
         branches: [[:"$v" | 14], [:"$v" | 13], [:"$v" | 14], [:"$v" | 13]],
         type: :and
       }
     }
   ], []},
  {%Digraph.Vertex{
     id: [:"$v" | 15],
     label: %{
       expects: %{v: %{}},
       input: %{t: %{}},
       resolver: :r17,
       type: :resolver
     }
   },
   [
     %Digraph.Vertex{
       id: [:"$v" | 17],
       label: %{branches: [[:"$v" | 15], [:"$v" | 16]], type: :or}
     }
   ], []},
  {%Digraph.Vertex{
     id: [:"$v" | 16],
     label: %{
       expects: %{v: %{}},
       input: %{u: %{}},
       resolver: :r18,
       type: :resolver
     }
   },
   [
     %Digraph.Vertex{
       id: [:"$v" | 17],
       label: %{branches: [[:"$v" | 15], [:"$v" | 16]], type: :or}
     }
   ], []},
  {%Digraph.Vertex{
     id: [:"$v" | 17],
     label: %{branches: [[:"$v" | 15], [:"$v" | 16]], type: :or}
   }, [],
   [
     %Digraph.Vertex{
       id: [:"$v" | 14],
       label: %{
         expects: %{w: %{}},
         input: %{v: %{}},
         resolver: :r19,
         type: :resolver
       }
     },
     %Digraph.Vertex{
       id: [:"$v" | 15],
       label: %{
         expects: %{v: %{}},
         input: %{t: %{}},
         resolver: :r17,
         type: :resolver
       }
     },
     %Digraph.Vertex{
       id: [:"$v" | 16],
       label: %{
         expects: %{v: %{}},
         input: %{u: %{}},
         resolver: :r18,
         type: :resolver
       }
     }
   ]},
  {%Digraph.Vertex{
     id: [:"$v" | 18],
     label: %{
       branches: [[:"$v" | 14], [:"$v" | 13], [:"$v" | 14], [:"$v" | 13]],
       type: :and
     }
   }, [],
   [
     %Digraph.Vertex{
       id: [:"$v" | 14],
       label: %{
         expects: %{w: %{}},
         input: %{v: %{}},
         resolver: :r19,
         type: :resolver
       }
     },
     %Digraph.Vertex{
       id: [:"$v" | 13],
       label: %{
         expects: %{r: %{}},
         input: %{q: %{}},
         resolver: :r16,
         type: :resolver
       }
     }
   ]},
  {%Digraph.Vertex{
     id: [:"$v" | 19],
     label: %{
       expects: %{y: %{}},
       input: %{ac: %{}},
       resolver: :r26,
       type: :resolver
     }
   },
   [
     %Digraph.Vertex{
       id: [:"$v" | 20],
       label: %{
         expects: %{ac: %{}},
         input: %{ad: %{}},
         resolver: :r27,
         type: :resolver
       }
     },
     %Digraph.Vertex{
       id: [:"$v" | 22],
       label: %{branches: [[:"$v" | 11], [:"$v" | 19]], type: :or}
     }
   ], []},
  {%Digraph.Vertex{
     id: [:"$v" | 20],
     label: %{
       expects: %{ac: %{}},
       input: %{ad: %{}},
       resolver: :r27,
       type: :resolver
     }
   },
   [
     %Digraph.Vertex{
       id: [:"$v" | 21],
       label: %{
         expects: %{ad: %{}},
         input: %{ae: %{}},
         resolver: :r28,
         type: :resolver
       }
     }
   ],
   [
     %Digraph.Vertex{
       id: [:"$v" | 19],
       label: %{
         expects: %{y: %{}},
         input: %{ac: %{}},
         resolver: :r26,
         type: :resolver
       }
     }
   ]},
  {%Digraph.Vertex{
     id: [:"$v" | 21],
     label: %{
       expects: %{ad: %{}},
       input: %{ae: %{}},
       resolver: :r28,
       type: :resolver
     }
   }, [],
   [
     %Digraph.Vertex{
       id: [:"$v" | 20],
       label: %{
         expects: %{ac: %{}},
         input: %{ad: %{}},
         resolver: :r27,
         type: :resolver
       }
     }
   ]},
  {%Digraph.Vertex{
     id: [:"$v" | 22],
     label: %{branches: [[:"$v" | 11], [:"$v" | 19]], type: :or}
   },
   [
     %Digraph.Vertex{
       id: [:"$v" | 12],
       label: %{
         expects: %{s: %{}},
         input: %{r: %{}, w: %{}},
         resolver: :r20,
         type: :resolver
       }
     }
   ],
   [
     %Digraph.Vertex{
       id: [:"$v" | 30],
       label: %{branches: [[:"$v" | 10], [:"$v" | 23]], type: :or}
     },
     %Digraph.Vertex{
       id: [:"$v" | 11],
       label: %{
         expects: %{y: %{}},
         input: %{s: %{}},
         resolver: :r21,
         type: :resolver
       }
     },
     %Digraph.Vertex{
       id: [:"$v" | 19],
       label: %{
         expects: %{y: %{}},
         input: %{ac: %{}},
         resolver: :r26,
         type: :resolver
       }
     }
   ]},
  {%Digraph.Vertex{
     id: [:"$v" | 23],
     label: %{
       expects: %{z: %{}},
       input: %{ab: %{}},
       resolver: :r25,
       type: :resolver
     }
   },
   [
     %Digraph.Vertex{
       id: [:"$v" | 29],
       label: %{branches: [[:"$v" | 25], [:"$v" | 27]], type: :or}
     },
     %Digraph.Vertex{
       id: [:"$v" | 30],
       label: %{branches: [[:"$v" | 10], [:"$v" | 23]], type: :or}
     }
   ], []},
  {%Digraph.Vertex{
     id: [:"$v" | 25],
     label: %{
       expects: %{ab: %{}},
       input: %{af: %{}},
       resolver: :r30,
       type: :resolver
     }
   },
   [
     %Digraph.Vertex{
       id: [:"$v" | 29],
       label: %{branches: [[:"$v" | 25], [:"$v" | 27]], type: :or}
     }
   ], []},
  {%Digraph.Vertex{
     id: [:"$v" | 26],
     label: %{
       expects: %{af: %{}},
       input: %{ae: %{}},
       resolver: :r29,
       type: :resolver
     }
   }, [],
   [
     %Digraph.Vertex{
       id: [:"$v" | 29],
       label: %{branches: [[:"$v" | 25], [:"$v" | 27]], type: :or}
     }
   ]},
  {%Digraph.Vertex{
     id: [:"$v" | 27],
     label: %{
       expects: %{ab: %{}},
       input: %{ad: %{}},
       resolver: :r31,
       type: :resolver
     }
   },
   [
     %Digraph.Vertex{
       id: [:"$v" | 28],
       label: %{
         expects: %{ad: %{}},
         input: %{ae: %{}},
         resolver: :r28,
         type: :resolver
       }
     },
     %Digraph.Vertex{
       id: [:"$v" | 29],
       label: %{branches: [[:"$v" | 25], [:"$v" | 27]], type: :or}
     }
   ], []},
  {%Digraph.Vertex{
     id: [:"$v" | 28],
     label: %{
       expects: %{ad: %{}},
       input: %{ae: %{}},
       resolver: :r28,
       type: :resolver
     }
   }, [],
   [
     %Digraph.Vertex{
       id: [:"$v" | 27],
       label: %{
         expects: %{ab: %{}},
         input: %{ad: %{}},
         resolver: :r31,
         type: :resolver
       }
     }
   ]},
  {%Digraph.Vertex{
     id: [:"$v" | 29],
     label: %{branches: [[:"$v" | 25], [:"$v" | 27]], type: :or}
   },
   [
     %Digraph.Vertex{
       id: [:"$v" | 26],
       label: %{
         expects: %{af: %{}},
         input: %{ae: %{}},
         resolver: :r29,
         type: :resolver
       }
     }
   ],
   [
     %Digraph.Vertex{
       id: [:"$v" | 23],
       label: %{
         expects: %{z: %{}},
         input: %{ab: %{}},
         resolver: :r25,
         type: :resolver
       }
     },
     %Digraph.Vertex{
       id: [:"$v" | 25],
       label: %{
         expects: %{ab: %{}},
         input: %{af: %{}},
         resolver: :r30,
         type: :resolver
       }
     },
     %Digraph.Vertex{
       id: [:"$v" | 27],
       label: %{
         expects: %{ab: %{}},
         input: %{ad: %{}},
         resolver: :r31,
         type: :resolver
       }
     }
   ]},
  {%Digraph.Vertex{
     id: [:"$v" | 30],
     label: %{branches: [[:"$v" | 10], [:"$v" | 23]], type: :or}
   },
   [
     %Digraph.Vertex{
       id: [:"$v" | 22],
       label: %{branches: [[:"$v" | 11], [:"$v" | 19]], type: :or}
     }
   ],
   [
     %Digraph.Vertex{
       id: [:"$v" | 9],
       label: %{
         expects: %{o: %{}},
         input: %{z: %{}},
         resolver: :r23,
         type: :resolver
       }
     },
     %Digraph.Vertex{
       id: [:"$v" | 10],
       label: %{
         expects: %{z: %{}},
         input: %{y: %{}},
         resolver: :r22,
         type: :resolver
       }
     },
     %Digraph.Vertex{
       id: [:"$v" | 23],
       label: %{
         expects: %{z: %{}},
         input: %{ab: %{}},
         resolver: :r25,
         type: :resolver
       }
     }
   ]},
  {%Digraph.Vertex{
     id: [:"$v" | 31],
     label: %{branches: [[:"$v" | 5], [:"$v" | 9]], type: :or}
   },
   [
     %Digraph.Vertex{
       id: [:"$v" | 6],
       label: %{
         expects: %{n: %{}},
         input: %{l: %{}},
         resolver: :r6,
         type: :resolver
       }
     }
   ],
   [
     %Digraph.Vertex{
       id: [:"$v" | 4],
       label: %{
         expects: %{p: %{}},
         input: %{o: %{}},
         resolver: :r9,
         type: :resolver
       }
     },
     %Digraph.Vertex{
       id: [:"$v" | 5],
       label: %{
         expects: %{o: %{}},
         input: %{n: %{}},
         resolver: :r7,
         type: :resolver
       }
     },
     %Digraph.Vertex{
       id: [:"$v" | 9],
       label: %{
         expects: %{o: %{}},
         input: %{z: %{}},
         resolver: :r23,
         type: :resolver
       }
     }
   ]}
]
